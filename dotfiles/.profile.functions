# Login to yb-tserver-0
tsbash() {
    if [[ $# -eq 0 ]] ; then
        echo 'tsbash <namespace>'
    else 
        kubectl exec -it yb-tserver-0 -n $1 -- bash
fi
}

# Login to yb-master-0
msbash() {
    if [[ $# -eq 0 ]] ; then
        echo 'msbash <namespace>'
    else 
        kubectl exec -it yb-master-0 -n $1 -- bash
fi
}

# Login to any pod
pbash() {
    if [[ $# -eq 0 ]] ; then
        echo 'pbash <pod> <namespace>'
    else 
        kubectl exec -it $1 -n $2 -- bash
fi
}

tsnbash() {
    if [[ $# -eq 0 ]] ; then
        echo 'tsnbash <tserver-number> <namespace>'
    else 
        kubectl exec -it yb-tserver-$1 -n $2 -- bash
fi
}

msnbash() {
    if [[ $# -eq 0 ]] ; then
        echo 'msnbash <master-number> <namespace>'
    else
        kubectl exec -it yb-master-$1 -n $2 -- bash
fi
}

tscmd() {
    if [[ $# -eq 0 ]] ; then
        echo 'tscmd <namespace> <command>'
    else 
        kubectl exec yb-tserver-0 -n $1 -- $2
fi
}

mscmd() {
    if [[ $# -eq 0 ]] ; then
        echo 'mscmd <namespace> <command>'
    else 
        kubectl exec yb-master-0 -n $1 -- $2
fi
}

tsncmd() {
    if [[ $# -eq 0 ]] ; then
        echo 'tsncmd <tserver-number> <namespace> <command>'
    else 
   kubectl exec yb-tserver-$1 -n $2 -- $3
fi
}

msncmd() {
    if [[ $# -eq 0 ]] ; then
        echo 'msncmd <master-number> <namespace> <command>'
    else 
        kubectl exec yb-master-$1 -n $2 -- $3
fi
}

ywbash() {
   kubectl exec -c yugaware -it yb-platform-yugaware-0 -n yb-platform -- bash

}

ywbashp() {
   kubectl exec -c postgres -it yb-platform-yugaware-0 -n yb-platform -- bash

}

function cptk(){
    if [[ $# -eq 0 ]] ; then
        echo 'cptk /path/to/file <namespace> <pod> <destination-path>'
    else 
        kubectl cp $1 $2/$3:$4
fi
}

function cpfk(){
    if [[ $# -eq 0 ]] ; then
        echo 'cpfk <namespace> <pod> </file/in/pod> <destination-path>'
    else 
        kubectl cp $1/$2:$3 $4
fi
}

# tsh function

tshscp() {
    if [[ $# -eq 0 ]] ; then
        echo 'tshscp <path/to/file> <ticket-number'
    else 
        tsh scp $1 support@lincoln:cases/$2/
fi
}

spin_until_completed() {
    if [[ $# -eq 0 ]] ; then
        echo 'spin_until_completed <process-id>'
    else
        spin[0]="-"
        spin[1]="\\"
        spin[2]="|"
        spin[3]="/"
        echo -n "[Running] ${spin[0]}" && while kill -0 $1 2> /dev/null
        do
            for i in "${spin[@]}"
            do
                echo -ne "\b$i"
                sleep 0.2
            done
        done
fi
}


# Cloud access

cloud_access() {
    if [[ $# -eq 0 ]]; then
       echo "cloud_access <universe_id> <ticket/incident>"
    else
       tsh login --proxy=teleport.cloud.yugabyte.com:443 --bind-addr localhost:55443 --request-roles platform_admin,cluster_admin --request-reason="@cloud-teleport-approvers, I need access to $1 to perform investigation for $2 cc:@Yogesh Jadhav"
    fi
}
gpush_notes() {
    if [[ $# -eq 0 ]] ; then
        echo 'No commit message provided'
    else
        # get input from user
        echo "Have you updated the TOC? (y/n): \c"
        read response
        if [[ $response == 'y' ]] ; then
            cd /Users/pgyogesh/Library/Mobile\ Documents/iCloud~md~obsidian/Documents/my_notes/
            echo "Adding files to git"
            git add .
            echo "Committing changes"
            git commit -m "$@"
            echo "Pushing changes to Gitlab"
            git push
            cd -
        else
            echo 'No changes made'
        fi
fi
}

nohup_generator() {
    echo $#
    if [ $# -lt 1 ]; then
        echo "Usage: nohup_generator <command>"
        return 1
    fi
    arguements=("$@")
    for i in "${arguements[@]}"
    do
        if [[ $i == *.sql ]] || [[ $i == *.sh ]] || [[ $i == *.py ]]; then
            file_name=$(basename $i)
        fi
    done
    date_time=$(date '+%Y-%m-%d-%H-%M-%S')
    # Generate nohup file name
    nohup_file_name=$file_name-$date_time.nohup
    # Generate nohup command
    echo "nohup $@ > $nohup_file_name 2>&1 &"
}

# YugabyteDB

# Get lnav command
function run_lnav() {
    local from_time=""
    local to_time=""
    local types=""
    local nodes=""
    local debug=""
    local help=""

    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -t|--from_time) from_time="$2"; shift ;;
            -T|--to_time) to_time="$2"; shift ;;
            --types) types="$2"; shift ;;
            --nodes) nodes="$2"; shift ;;
            --debug) debug="--debug" ;;
            -h|--help) help="--help" ;;
            *) echo "Unknown parameter passed: $1"; return 1 ;;
        esac
        shift
    done

    python3 ~/yogesh/scripts/get_lnav_command.py \
        ${from_time:+-t "$from_time"} \
        ${to_time:+-T "$to_time"} \
        ${types:+--types "$types"} \
        ${nodes:+--nodes "$nodes"} \
        $debug \
        $help
}

# Get the leader change time
function get_master_leader_change_time() {
    # Add help message
    if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
        echo "Run this function in the directory which contains the node directories"
    else
        find . -name "*master*INFO*" | while read -r file;
          do
            node=$(echo $file | cut -d'/' -f2)
            for time in $(zgrep "This master's current role is: LEADER" $file | cut -d' ' -f1,2| sed 's/ /-/g');
              do
                echo "$node $time" >> /tmp/leader_change_time
              done
            done
        sort -k2 /tmp/leader_change_time | tee master_leader_change_time
        echo "Leader change time saved in master_leader_change_time file"
        rm /tmp/leader_change_time
    fi
}


# Get the tablet leader change time
function get_tablet_leader_change_time() {
    # Add help message
    if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
        echo "Run this function in the directory which contains the node directories"
        echo "USAGE: get_tablet_leader_change_time <tablet-id>"
    elif [[ $# -eq 0 ]]; then
        echo "Please provide the tablet id"
    else
        tablet_id=$1
        find . -name "*tserver*INFO*" | while read -r file;
          do
            node=$(echo $file | cut -d'/' -f2)
            for time in $(zgrep "T $tablet_id .*Updating active role from FOLLOWER to LEADER" $file | cut -d' ' -f1,2| sed 's/ /-/g');
              do
                echo "$node $time $file" >> /tmp/tablet_leader_change_time
              done
            done
        sort -k2 /tmp/tablet_leader_change_time | tee tablet_leader_change_time
        echo "Leader change time saved in tablet_leader_change_time file"
        rm /tmp/tablet_leader_change_time
    fi
}



